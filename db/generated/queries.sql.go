// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :execresult
INSERT INTO players (
  id, name
) VALUES (
  ?, ?
)
`

type CreatePlayerParams struct {
	ID   string
	Name string
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPlayer, arg.ID, arg.Name)
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players
WHERE id = ?
`

func (q *Queries) DeletePlayer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, name FROM players
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT id, name FROM players
ORDER BY name
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
