// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type RatingSystemEnum string

const (
	RatingSystemEnumGlicko RatingSystemEnum = "glicko"
	RatingSystemEnumElo    RatingSystemEnum = "elo"
)

func (e *RatingSystemEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RatingSystemEnum(s)
	case string:
		*e = RatingSystemEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RatingSystemEnum: %T", src)
	}
	return nil
}

type NullRatingSystemEnum struct {
	RatingSystemEnum RatingSystemEnum
	Valid            bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRatingSystemEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RatingSystemEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RatingSystemEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRatingSystemEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.RatingSystemEnum, nil
}

type EloRating struct {
	UserID uuid.UUID
	GameID uuid.UUID
	Rating int32
}

type Game struct {
	ID           uuid.UUID
	Name         string
	RatingSystem RatingSystemEnum
}

type Match struct {
	ID             uuid.UUID
	GameID         uuid.UUID
	RatingsUpdated bool
	IsFinished     bool
	HappenedAt     time.Time
}

type MatchPlayer struct {
	MatchID       uuid.UUID
	UserID        uuid.UUID
	CurrentRating int32
	IsWinner      bool
	Score         sql.NullInt32
}

type User struct {
	ID   uuid.UUID
	Name string
}
