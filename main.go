/*
 * Rating Service
 *
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * API version: 0.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/feature/rds/auth"
	"github.com/nfk93/rating-service/db"
	"github.com/nfk93/rating-service/generated/api"
	"github.com/nfk93/rating-service/generated/database"
	"github.com/nfk93/rating-service/internal/endpoints"
	"github.com/nfk93/rating-service/internal/user"

	_ "github.com/lib/pq"
)

func main() {
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbUser := os.Getenv("DB_USER")
	dbName := os.Getenv("DB_NAME")
	dbEndpoint := fmt.Sprintf("%s:%s", dbHost, dbPort)
	region := "us-east-1"

	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		panic("configuration error: " + err.Error())
	}

	authenticationToken, err := auth.BuildAuthToken(
		context.TODO(),
		dbEndpoint,
		region, // AWS Region
		dbUser, // Database Account
		cfg.Credentials,
	)
	if err != nil {
		panic("failed to create authentication token: " + err.Error())
	}

	psqlconn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s",
		dbHost, dbPort, dbUser, authenticationToken, dbName,
	)

	sqldb, err := sql.Open("postgres", psqlconn)
	if err != nil {
		panic(fmt.Sprintf("error opening db connection: %s", err))
	}

	queries := database.New(sqldb)
	repo := db.NewRepo(queries)

	userService := user.NewUserService(repo)

	DefaultApiService := endpoints.NewApiService(userService)
	DefaultApiController := api.NewDefaultApiController(DefaultApiService)

	router := api.NewRouter(DefaultApiController)
	log.Fatal(http.ListenAndServe(":8080", router))
}
